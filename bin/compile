#!/usr/bin/env bash

# Usage:
#
#     $ bin/compile <build-dir> <cache-dir>


# Fail fast and fail hard.
set -eo pipefail

# Prepend proper path for virtualenv hackery. This will be deprecated soon.
export PATH=:/usr/local/bin:$PATH

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2

CACHED_DIRS=".heroku"

# Static configurations for virtualenv caches.
PROFILE_PATH="$BUILD_DIR/.profile.d/miniconda.sh"

# Sanitizing environment variables.
unset GIT_DIR PYTHONHOME PYTHONPATH LD_LIBRARY_PATH LIBRARY_PATH

# We'll need to send these statics to other scripts we `source`.
export BUILD_DIR CACHE_DIR BIN_DIR PROFILE_PATH

shopt -s extglob

[ $(uname) == "Darwin" ] && SED_FLAG='-l' || SED_FLAG='-u'

# Syntax sugar.
indent() {
  RE="s/^/       /"
  sed $SED_FLAG "$RE"
}

# Clean up pip output
cleanup() {
  sed $SED_FLAG -e 's/\.\.\.\+/.../g' | sed $SED_FLAG '/already satisfied/Id' | sed $SED_FLAG -e '/Overwriting/Id' |  sed $SED_FLAG -e '/python executable/Id' | sed $SED_FLAG -e '/no previously-included files/Id'
}

# Buildpack Steps.
function puts-step (){
  echo "-----> $@"
}

# Buildpack Warnings.
function puts-warn (){
  echo " !     $@"
}

# Usage: $ set-env key value
function set-env (){
  echo "export $1=$2" >> $PROFILE_PATH
}

# Usage: $ set-default-env key value
function set-default-env (){
  echo "export $1=\${$1:-$2}" >> $PROFILE_PATH
}

# Usage: $ set-default-env key value
function un-set-env (){
  echo "unset $1" >> $PROFILE_PATH
}

# Does some serious copying.
function deep-cp (){
  find -H $1 -maxdepth 1 -name '.*' -a \( -type d -o -type f -o -type l \) -exec cp -a '{}' $2 \;
  cp -r $1/!(tmp) $2
  # echo copying $1 to $2
}

# Does some serious moving.
function deep-mv (){
  deep-cp $1 $2

  rm -fr $1/!(tmp)
  find -H $1 -maxdepth 1 -name '.*' -a \( -type d -o -type f -o -type l \) -exec rm -fr '{}' \;
}

# Directory Hacks for path consistiency.
APP_DIR='/app'
TMP_APP_DIR=$CACHE_DIR/tmp_app_dir

# Copy Anvil app dir to temporary storage...
mkdir -p $TMP_APP_DIR
deep-mv $APP_DIR $TMP_APP_DIR

# Copy Application code in.
deep-mv $BUILD_DIR $APP_DIR

# Set new context.
ORIG_BUILD_DIR=$BUILD_DIR
BUILD_DIR=$APP_DIR

# Prepend proper path buildpack use.
export PATH=$BUILD_DIR/.heroku/miniconda/bin:$PATH
export PYTHONUNBUFFERED=1
export LANG=en_US.UTF-8

# Switch to the repo's context.
cd $BUILD_DIR

# ### The Cache
mkdir -p $CACHE_DIR

# Restore old artifacts from the cache.
for dir in $CACHED_DIRS; do
  cp -R $CACHE_DIR/$dir . &> /dev/null || true
done

set +e
# Create set-aside `.heroku` folder.
mkdir .heroku &> /dev/null
set -e

# Make profile.d directory.
mkdir -p $(dirname $PROFILE_PATH)

if [ ! -d /app/.heroku/miniconda ]; then
    puts-step "Preparing Python/Miniconda Environment"
    wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
    chmod +x miniconda.sh
    bash miniconda.sh -b -p /app/.heroku/miniconda/
fi

puts-step "Creating conda environment"
# TODO: Use update if its already there
conda env create -f environment-heroku.yml
source activate heroku-env

# Clean up the installation environment .
# TODO Determine if removing packages might be bad here
conda clean -pt --yes > /dev/null

# ### Finalize
#

# Store new artifacts in cache.
for dir in $CACHED_DIRS; do
  rm -rf $CACHE_DIR/$dir
  cp -R $dir $CACHE_DIR/
done

# Set context environment variables.
set-env PATH '$HOME/.heroku/miniconda/bin:$PATH'
PYTHONPATH='/app/.heroku/miniconda/lib/python3.6/site-packages:$PYTHONPATH'
if [ -f environment.yml ]; then
  PYTHONPATH="/app/.heroku/miniconda/envs/heroku-env/lib/python3.6/site-packages:${PYTHONPATH}"
  set-default-env CONDA_DEFAULT_ENV "heroku-env"
fi
set-default-env PYTHONPATH $PYTHONPATH
set-env PYTHONUNBUFFERED true
set-default-env LANG en_US.UTF-8
set-default-env PYTHONHASHSEED random

# ### Fin.

deep-mv $BUILD_DIR $ORIG_BUILD_DIR
deep-mv $TMP_APP_DIR $APP_DIR
